name: Build, Push to ECR, and Run on EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPO_NAME }}:latest .

      - name: Tag Docker Image
        run: |
          docker tag ${{ secrets.ECR_REPO_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      # Step to fetch public IPs for all instances with the tag 'springboot-api'
      - name: Fetch EC2 Public IPs based on Tag "springboot-api"
        id: fetch_ips
        run: |
          # Get all instance IDs with the tag "springboot-api"
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=springboot-api" \
            --query "Reservations[].Instances[].InstanceId" --output text)

          # Start all instances that are stopped
          aws ec2 start-instances --instance-ids $INSTANCE_IDS --region ${{ secrets.AWS_REGION }}

          # Wait for the instances to be in running state
          aws ec2 wait instance-running --instance-ids $INSTANCE_IDS --region ${{ secrets.AWS_REGION }}

          # Fetch the public IPs for all running instances
          PUBLIC_IPS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=springboot-api" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)

          # Save public IPs to the GitHub Actions environment variable
          echo "PUBLIC_IPS=$PUBLIC_IPS" >> $GITHUB_ENV

      # Loop through the fetched public IPs and run SSH commands on each
      - name: SSH into each EC2 instance and run commands
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          PUBLIC_IPS: ${{ env.PUBLIC_IPS }}
        run: |
          # Convert the PUBLIC_IPS environment variable into an array
          for IP in $PUBLIC_IPS; do
            echo "Connecting to $IP"
            echo "$PRIVATE_KEY" > private_key.pem
            chmod 600 private_key.pem
            ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$IP << 'EOF'
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
              docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
              docker stop springboot-api-container || true
              docker rm springboot-api-container || true
              docker run -d --rm --name springboot-api-container -p 8080:8080 \
                -e DB_URL="${{ secrets.DB_URL }}" \
                -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
                -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
                ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
          EOF
          done
